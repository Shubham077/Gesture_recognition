#include<iostream>
#include<opencv2\highgui\highgui.hpp>
#include<opencv2\imgproc\imgproc.hpp>
#include<opencv2\core\core.hpp>
#include<opencv2\video\background_segm.hpp>
#include<Windows.h>

#pragma comment(lib,"user32")
using namespace cv;
using namespace std;

//functions prototypes
void on_trackbar(int, void*);
void createTrackbars();
void showimgcontours(Mat &threshedimg, Mat &original);
void toggle(int key);
void morphit(Mat &img);
void condefects(vector<Vec4i> convexityDefectsSet, vector<Point> mycontour, Mat &frame);
void trackFilteredObject(int &x, int &y, Mat threshold, Mat &cameraFeed);
void drawObject(int x, int y, Mat &frame);		//x and y values for the location of the object
string intToString(int number);
//function prototypes ends here



//boolean toggles
bool domorph = false;
bool showchangedframe = false;
bool trackobjstatus = false;
bool showcontours = false;
bool showhull = false;
bool showcondefects = false;
//boolean toggles end


int H_MIN = 0;
int H_MAX = 255;
int S_MIN = 0;
int S_MAX = 255;
int V_MIN = 0;
int V_MAX = 255;

int kerode = 1;
int kdilate = 1;


const int MAX_NUM_OBJECTS = 50;								//max number of objects to be detected in frame   
const int FRAME_WIDTH = 640;									//default capture width 
const int FRAME_HEIGHT = 480;									//default capture height
const int MIN_OBJECT_AREA = 20 * 20;							//minimum object area
const int MAX_OBJECT_AREA = FRAME_HEIGHT*FRAME_WIDTH / 1.5;		//maximum object area

Point middle;

int main(void)
{
	createTrackbars();
	on_trackbar(0, 0);

	int x,y;
	Mat frame, hsvframe, rangeframe;
	int key;
	VideoCapture cap(0);

	while ((key = waitKey(30)) != 27)
	{
		toggle(key);
		cap >> frame;
		flip(frame, frame, 180);
		cvtColor(frame, hsvframe, COLOR_BGR2HSV);

		inRange(hsvframe, Scalar(H_MIN, S_MIN, V_MIN), Scalar(H_MAX, S_MAX, V_MAX), rangeframe);

		if (domorph)
			morphit(rangeframe);

		if (trackobjstatus)
			trackFilteredObject(x, y, rangeframe, frame);
		
		if (showcontours)
			showimgcontours(rangeframe, frame);

		if (showchangedframe)
			imshow("Camera", frame);
		else
			imshow("Camera", rangeframe);

	}
}


void on_trackbar(int, void*)		//This function gets called whenever a trackbar position is changed
{
	if (kerode == 0)
		kerode = 1;
	if (kdilate == 0)
		kdilate = 1;
}


void createTrackbars()
{
	String trackbarWindowName = "TrackBars";
	namedWindow(trackbarWindowName, WINDOW_NORMAL);
	createTrackbar("H_MIN", trackbarWindowName, &H_MIN, H_MAX, on_trackbar);
	createTrackbar("H_MAX", trackbarWindowName, &H_MAX, H_MAX, on_trackbar);
	createTrackbar("S_MIN", trackbarWindowName, &S_MIN, S_MAX, on_trackbar);
	createTrackbar("S_MAX", trackbarWindowName, &S_MAX, S_MAX, on_trackbar);
	createTrackbar("V_MIN", trackbarWindowName, &V_MIN, V_MAX, on_trackbar);
	createTrackbar("V_MAX", trackbarWindowName, &V_MAX, V_MAX, on_trackbar);
	createTrackbar("Erode", trackbarWindowName, &kerode, 31, on_trackbar);
	createTrackbar("Dilate", trackbarWindowName, &kdilate, 31, on_trackbar);

}


void morphit(Mat &img)
{
	erode(img, img, getStructuringElement(MORPH_RECT, Size(kerode, kerode)));
	dilate(img, img, getStructuringElement(MORPH_RECT, Size(kdilate, kdilate)));
}


void toggle(int key)
{
	//toggle line start
	if (key == 'm')
		domorph = !domorph;
	if (key == 'r')
		showchangedframe = !showchangedframe;
	if (key == 't')
		trackobjstatus = !trackobjstatus;
	if (key == 'c')
		showcontours = !showcontours;
	if (key == 'h')
		showhull = !showhull;
	if (key == 'k')
		showcondefects = !showcondefects;
	//toggle line end
}


void showimgcontours(Mat &threshedimg, Mat &original)
{

	int largest_area = 0;
	int largest_contour_index = 0;
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;

	findContours(threshedimg, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE);
	
	// Find the convex hull,contours and defects for each contour
	vector<vector<Point> >hull(contours.size());
	vector<vector<int> >inthull(contours.size());
	vector<vector<Vec4i> >defects(contours.size());

	for (int i = 0; i < contours.size(); i++)
	{
		convexHull(Mat(contours[i]), hull[i], false);
		convexHull(Mat(contours[i]), inthull[i], false);
		if (inthull[i].size()>3)
			convexityDefects(contours[i], inthull[i], defects[i]);
	}
	//Find hull and contour and defects end here

	//This will find largest contour
	for (int i = 0; i< contours.size(); i++)		 // Iterate through each contour. 
	{
		double a = contourArea(contours[i], false);  // Find the area of contour
		if (a>largest_area)
		{
			largest_area = a;
			largest_contour_index = i;               // Store the index of largest contour
		}
	}
	//Search for largest contour has end

	if (contours.size() > 0)
	{
		drawContours(original, contours, largest_contour_index, CV_RGB(0, 255, 0), 2, 8, hierarchy);
		//if want to show all contours use below one
		//drawContours(original,contours,-1, CV_RGB(0, 255, 0), 2, 8, hierarchy);
		if (showhull)
		drawContours(original, hull, largest_contour_index, CV_RGB(0, 0, 255), 2, 8, hierarchy);
		//if want to show all hull, use below one
		//drawContours(original,hull,-1, CV_RGB(0, 255, 0), 2, 8, hierarchy);
		if (showcondefects)
			condefects(defects[largest_contour_index], contours[largest_contour_index],original);
	}
}


void trackFilteredObject(int &x, int &y, Mat threshold, Mat &cameraFeed)
{

	Mat temp;
	threshold.copyTo(temp);
	//these two vectors needed for output of findContours
	vector< vector<Point> > contours;
	vector<Vec4i> hierarchy;
	//find contours of filtered image using openCV findContours function
	findContours(temp, contours, hierarchy, CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE);
	//use moments method to find our filtered object
	double refArea = 0;
	bool objectFound = false;
	if (hierarchy.size() > 0) {
		int numObjects = hierarchy.size();
		//if number of objects greater than MAX_NUM_OBJECTS we have a noisy filter
		if (numObjects < MAX_NUM_OBJECTS){
			for (int index = 0; index >= 0; index = hierarchy[index][0]) {

				Moments moment = moments((cv::Mat)contours[index]);
				double area = moment.m00;

				//if the area is less than 20 px by 20px then it is probably just noise
				//if the area is the same as the 3/2 of the image size, probably just a bad filter
				//we only want the object with the largest area so we safe a reference area each
				//iteration and compare it to the area in the next iteration.
				if (area > MIN_OBJECT_AREA && area<MAX_OBJECT_AREA && area>refArea){
					x = moment.m10 / area;
					y = moment.m01 / area;
					objectFound = true;
					refArea = area;
				}
				else objectFound = false;


			}
			//let user know you found an object
			if (objectFound == true){
				putText(cameraFeed, "Tracking Glove", Point(0, 50), 2, 1, Scalar(0, 255, 0), 2);
				//draw object location on screen
				drawObject(x, y, cameraFeed);
				middle.x = x;
				middle.y = y;
			}

		}
		else putText(cameraFeed, "TOO MUCH NOISE! ADJUST FILTER", Point(0, 50), 1, 2, Scalar(0, 0, 255), 2);
	}
}


void drawObject(int x, int y, Mat &frame)
{
	
	INPUT key;
	//openCV drawing functions to draw crosshairs
	//on your tracked image!

	circle(frame, Point(x, y), 20, Scalar(0, 255, 0), 2);
	if (y - 25>0)
		line(frame, Point(x, y), Point(x, y - 25), Scalar(0, 255, 0), 2);
	else line(frame, Point(x, y), Point(x, 0), Scalar(0, 255, 0), 2);
	if (y + 25<FRAME_HEIGHT)
		line(frame, Point(x, y), Point(x, y + 25), Scalar(0, 255, 0), 2);
	else line(frame, Point(x, y), Point(x, FRAME_HEIGHT), Scalar(0, 255, 0), 2);
	if (x - 25>0)
		line(frame, Point(x, y), Point(x - 25, y), Scalar(0, 255, 0), 2);
	else line(frame, Point(x, y), Point(0, y), Scalar(0, 255, 0), 2);
	if (x + 25<FRAME_WIDTH)
		line(frame, Point(x, y), Point(x + 25, y), Scalar(0, 255, 0), 2);
	else line(frame, Point(x, y), Point(FRAME_WIDTH, y), Scalar(0, 255, 0), 2);

	putText(frame, intToString(x) + "," + intToString(y), Point(x, y + 30), 1, 1, Scalar(0, 255, 0), 2); // TRACKING GLOVE TEXT
	line(frame, Point(FRAME_WIDTH/3, 0), Point(FRAME_WIDTH/3, FRAME_HEIGHT), Scalar(0, 255, 0), 2); // LINE FOR LEFT STEER
	line(frame, Point(2*(FRAME_WIDTH/3), 0), Point(2*(FRAME_WIDTH/3), FRAME_HEIGHT), Scalar(0, 255, 0), 2); //LINE FOR RIGHT STEER
	if(x < (FRAME_WIDTH/3))
	{	
		char ch = 'a';
	
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking

		for(int i=0;i<10;i++)
	{
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	Sleep(50);//Wait one second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));
		}
	}
	if(x > (2*(FRAME_WIDTH/3)))
	{	
		char ch = 'd';
	
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking

		for(int i=0;i<10;i++)
	{
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	Sleep(50);//Wait one second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));
		}
	}

}

string intToString(int number){


	std::stringstream ss;
	ss << number;
	return ss.str();
}

void condefects(vector<Vec4i> convexityDefectsSet, vector<Point> mycontour, Mat &original)
{
	Point2f mycenter;
	float radii;
	long double fingers=0;
	INPUT key;
	minEnclosingCircle(mycontour,mycenter,radii);
	cout << "==start==" << endl;
	for (int cDefIt = 0; cDefIt < convexityDefectsSet.size(); cDefIt++) {

		int startIdx = convexityDefectsSet[cDefIt].val[0]; 
		Point ptStart(mycontour[startIdx]);

		int endIdx = convexityDefectsSet[cDefIt].val[1]; 
		Point ptEnd(mycontour[endIdx]);

		int farIdx = convexityDefectsSet[cDefIt].val[2]; 
		Point ptFar(mycontour[farIdx]);

		double depth = static_cast<double>(convexityDefectsSet[cDefIt].val[3]) / 256;
		//cout << "depth" << depth << endl;
		//display start points of finger
	
		if (depth>11 && ptStart.y<mycenter.y)
		{
			circle(original, ptStart, 4, CV_RGB(255, 0,0), 4);
			fingers++;
			
		}

	}

    if(fingers == 1)
	{
 

	char ch = 's';
	
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking

		for(int i=0;i<10;i++)
	{
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	Sleep(50);//Wait one second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));
		}
	}
	else if(fingers == 4)
	{
 

	char ch = 'w';
	
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	//Sending key-up.
	Sleep(1000 * 3);//Wait 3 second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));

	}
	/*
	else if(fingers == 3)
	{

			char ch1 = 'a';
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch1), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking
	
	
	for(int i=0;i<3;i++)
	{
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	//Sending key-up.
	Sleep(50);//Wait one second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));
	}
 	char ch = 'w';
	
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	Sleep(50);//Wait one second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));
	}


	else if(fingers == 4)
	{

			char ch1 = 'd';
	
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch1), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking
	
	for(int i=0;i<3;i++)
	{
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	//Sending key-up.
	Sleep(50);//Wait one second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));	
	}


  	char ch = 'w';
	
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	Sleep(50);//Wait one second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));
	}*/

	else if(fingers == 5)
	{
	char ch = 'e';
	
	memset(&key,0,sizeof(INPUT));//Zero the structure.
		key.type = INPUT_KEYBOARD;
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.wScan = 
		static_cast<WORD>(MapVirtualKeyEx(VkKeyScanA(ch), MAPVK_VK_TO_VSC, GetKeyboardLayout(0)));//more pinvoking
	key.ki.dwFlags = KEYEVENTF_SCANCODE;
	//Ready to send the key-down event.
	SendInput(1, &key, sizeof(INPUT));	
	//Sending key-up.
	Sleep(50);//Wait one second before sending key-up.
	//Sending key-up.
	key.ki.dwExtraInfo = GetMessageExtraInfo();
	key.ki.dwFlags = KEYEVENTF_SCANCODE | KEYEVENTF_KEYUP;//Key-up need be defined too, or just use the value.
	SendInput(1, &key, sizeof(INPUT));
	}
	

	//display fingers on image
	putText(original,"Fingers : "+to_string(fingers),Point(50,100),2,2,CV_RGB(0,255,0),4,8);
	cout << "==end line==" << endl;
}// condefects ends here

	
